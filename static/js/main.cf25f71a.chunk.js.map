{"version":3,"sources":["components/game/interface.ts","components/game/formcreate.tsx","components/game/input.tsx","components/game/dialog.tsx","components/game/styles.ts","components/game/board.tsx","components/game/container.tsx","App.js","reportWebVitals.js","index.js"],"names":["Player","Index","props","boardSquare","setBoardSquare","renderBoard","isPlaying","noValidate","autoComplete","Grid","container","spacing","item","xs","Typography","variant","gutterBottom","TextField","fullWidth","label","id","value","defaultValue","onChange","e","target","disabled","type","Button","color","size","onClick","style","height","useStyles","makeStyles","theme","createStyles","root","classes","data","index","onCheckBoxChange","activePlayer","FormControlLabel","control","Checkbox","className","icon","fontSize","checkedIcon","player","A","name","checked","margin","open","handleClose","winner","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","gridStyle","textAlign","borderBottom","borderRight","gridRightestStyle","gridBottomStyle","openDialog","handleCloseDialog","dataGrid","justify","GridList","cellHeight","cols","Number","map","d","setGridStyle","col","row","GridListTile","useState","setWinner","setDataGrid","React","setOpenDialog","setActivePlayer","setIsPlaying","checkWin","t","_","r","length","grid","times","n","push","useEffect","allPlayerClick","filter","playerData","groupBy","playerDataGrid","slash","p","backslash","Box","component","pt","pb","inputData","selectData","B","App","Fragment","CssBaseline","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf25f71a.chunk.js","sourcesContent":["export interface dataGridInterface {\n  row: number;\n  col: number;\n  player: string;\n}\n\nexport enum Player {\n    A = \"X\",\n    B = \"O\",\n  }","//React\nimport React from \"react\";\n//MUI\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nconst Index = (props:any) => {\n    const boardSquare:string = props.boardSquare;\n    const setBoardSquare:React.Dispatch<React.SetStateAction<string>> = props.setBoardSquare;\n    const renderBoard: () => void = props.renderBoard;\n    const isPlaying:boolean = props.isPlaying;\n  return (\n    <form noValidate autoComplete=\"off\">\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" gutterBottom>\n            Create Board\n          </Typography>\n        </Grid>\n        <Grid item xs={10}>\n          <TextField\n            fullWidth={true}\n            label=\"Input Grid Number\"\n            id=\"outlined-size-normal\"\n            variant=\"outlined\"\n            value={boardSquare}\n            defaultValue={3}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              setBoardSquare(e.target.value);\n            }}\n            disabled={false}\n            type=\"number\"\n          />\n        </Grid>\n        <Grid item xs={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            fullWidth={true}\n            onClick={renderBoard}\n            style={{ height: \"56px\" }}\n            disabled={isPlaying}\n          >\n            OK\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n\nexport default Index;\n","//React\nimport React from \"react\";\n//MUI\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n//Interface\nimport { dataGridInterface, Player } from \"./interface\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '&.MuiCheckbox-colorSecondary.Mui-disabled':{\n          color: '#f50057',\n      }\n    },\n  })\n);\n\nfunction Index(props: any) {\n  const classes = useStyles();\n  const data: dataGridInterface = props.data;\n  const index: number = props.index;\n  const onCheckBoxChange: any = props.onCheckBoxChange;\n  const activePlayer: Player = props.activePlayer;\n  const setOnChange = () => {\n    if (data.player === \"\") {\n      onCheckBoxChange({ ...data, player: activePlayer }, index);\n    }\n  };\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          className={classes.root}\n          icon={<CheckBoxOutlineBlankIcon style={{ fontSize: 80 }} />}\n          checkedIcon={\n            data.player === Player.A ? (\n              <CloseIcon style={{ fontSize: 100 }} />\n            ) : (\n              <RadioButtonUncheckedIcon style={{ fontSize: 80 }} />\n            )\n          }\n          name=\"checked\"\n          onChange={() => {\n            setOnChange();\n          }}\n          checked={data.player !== \"\"}\n          disabled={data.player !== \"\"}\n        />\n      }\n      label=\"\"\n      style={{ margin: 0 }}\n    />\n  );\n}\n\nexport default Index;\n","//React\nimport React from \"react\";\n//MUI\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst Index = (props: any) => {\n  const open: boolean = props.open;\n  const handleClose: any = props.handleClose;\n  const winner: string = props.winner;\n  return (\n    <Dialog\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">{\"Game Finish\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <Typography variant=\"h4\" gutterBottom>\n            The Winner is {winner}.\n          </Typography>\n          <Typography variant=\"body1\" gutterBottom>\n            Restart Click OK.\n          </Typography>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} color=\"primary\" autoFocus>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default Index;\n","export const gridStyle: React.CSSProperties = {\n    textAlign: \"center\",\n    borderBottom: \"1px solid #dddddd\",\n    borderRight: \"1px solid #dddddd\",\n  };\n  \n  export const gridRightestStyle: React.CSSProperties = {\n    borderRight: \"0\",\n  };\n  \n  export const gridBottomStyle: React.CSSProperties = {\n    borderBottom: \"0\",\n  };","//React\nimport React from \"react\";\n//MUI\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport Button from \"@material-ui/core/Button\";\n//Component\nimport Input from \"./input\";\nimport Dialog from \"./dialog\";\n//Styles\nimport { gridStyle, gridRightestStyle, gridBottomStyle } from \"./styles\";\n//Interface,Enum\nimport { dataGridInterface, Player } from \"./interface\";\n\nconst Index = (props: any) => {\n  const activePlayer: Player = props.activePlayer;\n  const boardSquare: string = props.boardSquare;\n  const onCheckBoxChange: (\n    inputData: dataGridInterface,\n    index: number\n  ) => void = props.onCheckBoxChange;\n  const openDialog: boolean = props.openDialog;\n  const handleCloseDialog: () => void = props.handleCloseDialog;\n  const winner: string = props.winner;\n  const dataGrid: dataGridInterface[] = props.dataGrid;\n  return (\n    <Grid container spacing={2} justify=\"center\">\n      <Grid item xs={12}>\n        <Typography variant=\"h3\" gutterBottom>\n          Turn : {activePlayer}\n        </Typography>\n        <GridList cellHeight=\"auto\" cols={Number(boardSquare)}>\n          {dataGrid.map((d: dataGridInterface, index: number) => {\n            let setGridStyle = { ...gridStyle };\n            if (d.col === Number(boardSquare)) {\n              setGridStyle = { ...setGridStyle, ...gridRightestStyle };\n            }\n            if (d.row === Number(boardSquare)) {\n              setGridStyle = { ...setGridStyle, ...gridBottomStyle };\n            }\n            return (\n              <GridListTile key={index} cols={1} style={{ ...setGridStyle }}>\n                <Input\n                  data={d}\n                  index={index}\n                  onCheckBoxChange={onCheckBoxChange}\n                  activePlayer={activePlayer}\n                ></Input>\n              </GridListTile>\n            );\n          })}\n        </GridList>\n        <Dialog\n          open={openDialog}\n          handleClose={handleCloseDialog}\n          winner={winner}\n        />\n      </Grid>\n\n      <Grid item xs={2}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          fullWidth={true}\n          onClick={handleCloseDialog}\n        >\n          Reset\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Index;\n","//React\nimport React, { useState, useEffect } from \"react\";\n//Package\nimport _ from \"lodash\";\n//MUI\nimport Box from \"@material-ui/core/Box\";\n//Component\nimport FormCreate from \"./formcreate\";\nimport Board from \"./board\";\n//Interface,Enum\nimport { dataGridInterface, Player } from \"./interface\";\n\nconst Index = () => {\n  let data: dataGridInterface[] = [];\n  const [boardSquare, setBoardSquare] = useState<string>(\"3\");\n  const [winner, setWinner] = useState<string>(\"\");\n  const [dataGrid, setDataGrid] = useState<dataGridInterface[]>(data);\n  const [openDialog, setOpenDialog] = React.useState<boolean>(false);\n  const [activePlayer, setActivePlayer] = React.useState(Player.A);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const onCheckBoxChange = (inputData: dataGridInterface, index: number) => {\n    let selectData = dataGrid[index];\n    if (selectData.player === \"\") {\n      dataGrid[index] = { ...selectData, player: activePlayer };\n      if (activePlayer === Player.A) {\n        setActivePlayer(Player.B);\n      } else if (activePlayer === Player.B) {\n        setActivePlayer(Player.A);\n      }\n    }\n    setDataGrid([...dataGrid]);\n  };\n\n  const handleCloseDialog = () => {\n    setWinner(\"\");\n    renderBoard();\n    setOpenDialog(false);\n    setIsPlaying(false);\n  };\n\n  const checkWin = (t: _.Dictionary<dataGridInterface[]>) => {\n    _.map(t, function (r: dataGridInterface[]) {\n      r.length === Number(boardSquare) && setWinner(r[0].player);\n    });\n  };\n\n  const renderBoard = () => {\n    data = [];\n    const grid = _.times(Number(boardSquare), (n: Number) => {\n      return Number(n) + 1;\n    });\n    grid.map((row) => {\n      grid.map((col) => {\n        data.push({ row: row, col: col, player: \"\" });\n      });\n    });\n    setDataGrid(data);\n    setIsPlaying(true);\n  };\n\n  useEffect(() => {\n    const allPlayerClick = _.filter(dataGrid, function (d) {\n      return d.player !== \"\";\n    });\n    const playerData = _.groupBy(allPlayerClick, \"player\");\n\n    _.map(playerData, (playerDataGrid) => {\n      if (playerDataGrid.length >= 3) {\n        // win with -\n        const row = _.groupBy(playerDataGrid, \"row\");\n        checkWin(row);\n        // win with |\n        const col = _.groupBy(playerDataGrid, \"col\");\n        checkWin(col);\n        // win with /\n        const slash = _.filter(playerDataGrid, function (p) {\n          return p.col + p.row === 3 + 1;\n        });\n        checkWin({ \"\": slash });\n        // win with \\\n        const backslash = _.filter(playerDataGrid, function (p) {\n          return p.col === p.row;\n        });\n        checkWin({ \"\": backslash });\n      }\n    });\n  }, [dataGrid]);\n\n  useEffect(() => {\n    if (winner !== \"\") setOpenDialog(true);\n  }, [winner]);\n\n  return (\n    <Box component=\"div\" pt={4} pb={4}>\n      {!isPlaying && (\n        <FormCreate\n          boardSquare={boardSquare}\n          setBoardSquare={setBoardSquare}\n          renderBoard={renderBoard}\n          isPlaying={isPlaying}\n        />\n      )}\n\n      {isPlaying && (\n        <Board\n          activePlayer={activePlayer}\n          boardSquare={boardSquare}\n          onCheckBoxChange={onCheckBoxChange}\n          openDialog={openDialog}\n          handleCloseDialog={handleCloseDialog}\n          winner={winner}\n          dataGrid={dataGrid}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default Index;\n","//React\nimport React from \"react\";\n//MUI\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\n//Component\nimport GameContainer from \"./components/game/container\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <GameContainer/>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}